name: Test rust-toolkit v2.1.1 Features

on:
  push:
    branches: [main]
    paths:
      - '.rust-toolkit.toml'
      - '.github/workflows/enhanced-release.yml'
      - '.github/workflows/test-rust-toolkit-v2.1.1.yml'
  pull_request:
    branches: [main]
    paths:
      - '.rust-toolkit.toml'
      - '.github/workflows/enhanced-release.yml'
      - '.github/workflows/test-rust-toolkit-v2.1.1.yml'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_TOOLKIT_VERSION: v2.1.1

jobs:
  test-toolkit-features:
    name: Test rust-toolkit v2.1.1 (${{ matrix.target }})
    runs-on: ubuntu-latest
    container: ghcr.io/loonghao/rust-toolkit:v2.1.1
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify rust-toolkit v2.1.1 features
        shell: bash
        run: |
          echo "🛠️ Testing rust-toolkit v2.1.1 features"
          echo "📦 Toolkit version: ${{ env.RUST_TOOLKIT_VERSION }}"
          
          # Check Rust version
          echo "🦀 Rust version:"
          rustc --version
          cargo --version
          
          # Check if cross compilation tools are available
          if command -v cross >/dev/null 2>&1; then
            echo "✅ Cross compilation tool available"
            cross --version
          else
            echo "ℹ️ Cross tool not available, using cargo directly"
          fi
          
          # Check for rust-toolkit specific tools
          echo "🔍 Checking for rust-toolkit specific tools..."
          
          # Check if strip is available
          if command -v strip >/dev/null 2>&1; then
            echo "✅ Strip tool available"
            strip --version || echo "Strip version not available"
          fi
          
          # Check if upx is available (for binary compression)
          if command -v upx >/dev/null 2>&1; then
            echo "✅ UPX compression tool available"
            upx --version
          fi
          
          # Check target support
          echo "🎯 Checking target support for ${{ matrix.target }}"
          rustup target list --installed | grep "${{ matrix.target }}" || {
            echo "Installing target ${{ matrix.target }}"
            rustup target add ${{ matrix.target }}
          }

      - name: Test configuration loading
        shell: bash
        run: |
          echo "📋 Testing .rust-toolkit.toml configuration"
          
          if [[ -f ".rust-toolkit.toml" ]]; then
            echo "✅ Configuration file found"
            echo "📄 Configuration content:"
            cat .rust-toolkit.toml
          else
            echo "⚠️ Configuration file not found"
          fi

      - name: Test build with rust-toolkit v2.1.1
        shell: bash
        run: |
          echo "🚀 Testing build with rust-toolkit v2.1.1 for ${{ matrix.target }}"
          
          # Set environment for zero-dependency builds
          export RUSTFLAGS="-C target-feature=+crt-static"
          export OPENSSL_STATIC=1
          export PKG_CONFIG_ALLOW_CROSS=1
          
          # Test build
          cargo build --release --target ${{ matrix.target }}
          
          # Verify binary
          binary_name="py2pyd"
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            binary_name="py2pyd.exe"
          fi
          
          binary_path="target/${{ matrix.target }}/release/$binary_name"
          
          if [[ -f "$binary_path" ]]; then
            echo "✅ Binary built successfully: $binary_path"
            echo "📊 Binary size: $(du -h "$binary_path" | cut -f1)"
            
            # Test if binary is static (for musl targets)
            if [[ "${{ matrix.target }}" == *musl* ]]; then
              if command -v ldd >/dev/null 2>&1; then
                if ldd "$binary_path" 2>&1 | grep -q "not a dynamic executable"; then
                  echo "✅ Confirmed: Static binary with no dynamic dependencies"
                else
                  echo "⚠️ Binary has dynamic dependencies:"
                  ldd "$binary_path" || true
                fi
              fi
            fi
          else
            echo "❌ Binary not found: $binary_path"
            exit 1
          fi

      - name: Test artifact creation
        shell: bash
        run: |
          echo "📦 Testing artifact creation for ${{ matrix.target }}"
          
          # Create test artifacts directory
          mkdir -p test-artifacts
          
          binary_name="py2pyd"
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            binary_name="py2pyd.exe"
          fi
          
          binary_path="target/${{ matrix.target }}/release/$binary_name"
          
          # Copy binary to artifacts
          cp "$binary_path" test-artifacts/
          
          # Create test README
          cat > test-artifacts/README.txt << EOF
py2pyd Test Build
================

Target: ${{ matrix.target }}
Toolkit: rust-toolkit ${{ env.RUST_TOOLKIT_VERSION }}
Build Date: $(date)

This is a test build to verify rust-toolkit v2.1.1 functionality.
EOF
          
          # Create archive
          cd test-artifacts
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            archive_name="py2pyd-${{ matrix.target }}-test.zip"
            zip -r "../$archive_name" .
          else
            archive_name="py2pyd-${{ matrix.target }}-test.tar.gz"
            tar -czf "../$archive_name" .
          fi
          cd ..
          
          echo "✅ Created test archive: $archive_name"
          echo "📊 Archive size: $(du -h "$archive_name" | cut -f1)"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: py2pyd-${{ matrix.target }}-rust-toolkit-v2.1.1-test
          path: |
            py2pyd-${{ matrix.target }}-test.*
          retention-days: 3

      - name: Display test summary
        shell: bash
        run: |
          echo "## 🧪 rust-toolkit v2.1.1 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: \`${{ matrix.target }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Toolkit Version**: ${{ env.RUST_TOOLKIT_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          binary_name="py2pyd"
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            binary_name="py2pyd.exe"
          fi
          
          binary_path="target/${{ matrix.target }}/release/$binary_name"
          if [[ -f "$binary_path" ]]; then
            size=$(du -h "$binary_path" | cut -f1)
            echo "- **Binary Size**: $size" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Verified Features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Cross Compilation**: Target ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Static Linking**: Zero dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Artifact Creation**: Archive generation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Configuration**: .rust-toolkit.toml support" >> $GITHUB_STEP_SUMMARY

  test-macos-compatibility:
    name: Test macOS Compatibility
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Test macOS builds
        shell: bash
        run: |
          echo "🍎 Testing macOS builds without rust-toolkit container"
          
          for target in x86_64-apple-darwin aarch64-apple-darwin; do
            echo "🎯 Building for $target"
            cargo build --release --target $target
            
            binary_path="target/$target/release/py2pyd"
            if [[ -f "$binary_path" ]]; then
              echo "✅ macOS binary built: $binary_path"
              echo "📊 Binary size: $(du -h "$binary_path" | cut -f1)"
            else
              echo "❌ macOS binary not found: $binary_path"
              exit 1
            fi
          done

      - name: Display macOS test summary
        shell: bash
        run: |
          echo "## 🍎 macOS Compatibility Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Targets**: x86_64-apple-darwin, aarch64-apple-darwin" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Method**: Native macOS runner" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Verified" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Intel macOS**: x86_64-apple-darwin" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Apple Silicon**: aarch64-apple-darwin" >> $GITHUB_STEP_SUMMARY
