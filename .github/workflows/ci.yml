name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Use reusable CI workflow from rust-actions-toolkit (includes code quality checks)
  ci:
    uses: loonghao/rust-actions-toolkit/.github/workflows/reusable-ci.yml@v2.2.0
    with:
      # Rust toolchain version
      rust-toolchain: stable
      # Enable coverage reporting
      enable-coverage: false
      # Disable Python wheel testing for this project
      enable-python-wheel: false
      # Additional target platforms for zero-dependency testing
      additional-targets: |
        [
          {"target": "x86_64-pc-windows-gnu", "os": "ubuntu-22.04"},
          {"target": "i686-pc-windows-gnu", "os": "ubuntu-22.04"},
          {"target": "x86_64-unknown-linux-musl", "os": "ubuntu-22.04"},
          {"target": "aarch64-unknown-linux-musl", "os": "ubuntu-22.04"}
        ]

  # Add release-style build testing to catch issues early
  test-release-builds:
    name: Test Release Builds
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test the same problematic targets that caused issues in release
          - { target: "x86_64-pc-windows-gnu", os: "ubuntu-22.04" }
          - { target: "i686-pc-windows-gnu", os: "ubuntu-22.04" }
          - { target: "x86_64-unknown-linux-musl", os: "ubuntu-22.04" }
          - { target: "aarch64-unknown-linux-musl", os: "ubuntu-22.04" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install packages (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            libssl-dev \
            musl-tools \
            curl \
            git

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Setup cross-compilation toolchain
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - name: Install cross for musl targets
        uses: taiki-e/install-action@v2
        with:
          tool: cross
        if: contains(matrix.target, '-musl')

      - name: Configure OpenSSL for musl targets
        if: contains(matrix.target, '-musl')
        run: |
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Configure environment for mimalloc compatibility
        run: |
          echo "CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG=true" >> $GITHUB_ENV
          echo "RUSTFLAGS=-D warnings" >> $GITHUB_ENV

      - name: Test release build (same as actual release)
        run: |
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi


