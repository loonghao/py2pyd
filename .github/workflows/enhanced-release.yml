name: Enhanced Release with rust-toolkit v2.1.1

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  RUST_TOOLKIT_VERSION: v2.1.1

jobs:
  build-and-release:
    name: Build and Release (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        include:
          # Zero-dependency Windows builds
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            container: ghcr.io/loonghao/rust-toolkit:v2.1.1
            archive_format: zip
            name: "Windows 64-bit (Zero Dependencies)"
          - target: i686-pc-windows-gnu
            os: ubuntu-latest
            container: ghcr.io/loonghao/rust-toolkit:v2.1.1
            archive_format: zip
            name: "Windows 32-bit (Zero Dependencies)"
          # Static Linux builds
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            container: ghcr.io/loonghao/rust-toolkit:v2.1.1
            archive_format: tar.gz
            name: "Linux 64-bit Static"
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            container: ghcr.io/loonghao/rust-toolkit:v2.1.1
            archive_format: tar.gz
            name: "Linux ARM64 Static"
          # Standard Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            container: ghcr.io/loonghao/rust-toolkit:v2.1.1
            archive_format: tar.gz
            name: "Linux 64-bit"
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            container: ghcr.io/loonghao/rust-toolkit:v2.1.1
            archive_format: tar.gz
            name: "Linux ARM64"
          # macOS builds using native runners
          - target: x86_64-apple-darwin
            os: macos-latest
            archive_format: tar.gz
            name: "macOS Intel"
          - target: aarch64-apple-darwin
            os: macos-latest
            archive_format: tar.gz
            name: "macOS Apple Silicon"

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain (macOS only)
        if: matrix.os == 'macos-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Check Rust and toolkit version
        shell: bash
        run: |
          echo "🦀 Rust version:"
          rustc --version
          echo "📦 Cargo version:"
          cargo --version
          echo "🛠️ Toolkit version: ${{ env.RUST_TOOLKIT_VERSION }}"
          
          # Check if rust-toolkit specific tools are available
          if command -v cross >/dev/null 2>&1; then
            echo "✅ Cross compilation tool available"
            cross --version
          fi

      - name: Configure build environment
        shell: bash
        run: |
          echo "🔧 Configuring build environment for ${{ matrix.target }}"
          
          # Set environment for zero-dependency builds (Linux/Windows only)
          if [[ "${{ matrix.os }}" != "macos-latest" ]]; then
            echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
            echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
            echo "🔒 Static linking enabled for zero-dependency build"
          else
            echo "🍎 macOS native build configuration"
          fi

      - name: Build release binary
        shell: bash
        run: |
          echo "🚀 Building release binary for ${{ matrix.target }}"
          echo "📦 Target: ${{ matrix.name }}"
          
          # Build the binary
          cargo build --release --target ${{ matrix.target }} --verbose
          
          echo "✅ Build completed successfully!"

      - name: Verify and prepare artifacts
        shell: bash
        run: |
          echo "🔍 Verifying and preparing artifacts for ${{ matrix.target }}"
          
          # Create release directory
          mkdir -p release
          
          # Determine binary name and extension
          binary_name="py2pyd"
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            binary_name="py2pyd.exe"
          fi
          
          binary_path="target/${{ matrix.target }}/release/$binary_name"
          
          if [[ ! -f "$binary_path" ]]; then
            echo "❌ Binary not found: $binary_path"
            exit 1
          fi
          
          echo "📁 Binary found: $binary_path"
          echo "📊 Binary size: $(du -h "$binary_path" | cut -f1)"
          
          # Copy binary to release directory
          cp "$binary_path" "release/"
          
          # Create README for the release
          cat > release/README.txt << EOF
py2pyd - Python to PYD Compiler
===============================

Target: ${{ matrix.target }}
Build: ${{ matrix.name }}
Version: ${GITHUB_REF#refs/tags/}
Built with: rust-toolkit ${{ env.RUST_TOOLKIT_VERSION }}

This is a zero-dependency build that runs without installation.

Usage:
  ./py2pyd --help

For more information, visit:
  https://github.com/loonghao/py2pyd
EOF
          
          echo "📄 Created README.txt"
          ls -la release/

      - name: Create release archive
        shell: bash
        run: |
          echo "📦 Creating release archive for ${{ matrix.target }}"
          
          cd release
          
          if [[ "${{ matrix.archive_format }}" == "zip" ]]; then
            archive_name="py2pyd-${{ matrix.target }}.zip"
            zip -r "../$archive_name" .
          else
            archive_name="py2pyd-${{ matrix.target }}.tar.gz"
            tar -czf "../$archive_name" .
          fi
          
          cd ..
          
          echo "✅ Created archive: $archive_name"
          echo "📊 Archive size: $(du -h "$archive_name" | cut -f1)"
          
          # Verify archive contents
          echo "📋 Archive contents:"
          if [[ "${{ matrix.archive_format }}" == "zip" ]]; then
            unzip -l "$archive_name"
          else
            tar -tzf "$archive_name"
          fi

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: py2pyd-${{ matrix.target }}.*
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          draft: false
          prerelease: false
          name: "py2pyd ${{ github.ref_name }}"
          body: |
            ## 🚀 py2pyd ${{ github.ref_name }}
            
            Built with rust-toolkit ${{ env.RUST_TOOLKIT_VERSION }} for enhanced cross-platform compatibility.
            
            ### 📦 Downloads
            
            Choose the appropriate binary for your platform:
            
            - **Windows**: Zero-dependency executables that run without installation
            - **Linux**: Static binaries compatible with any Linux distribution  
            - **macOS**: Native binaries for Intel and Apple Silicon
            
            ### 🛠️ Build Information
            
            - **Target**: ${{ matrix.target }}
            - **Type**: ${{ matrix.name }}
            - **Toolkit**: rust-toolkit ${{ env.RUST_TOOLKIT_VERSION }}
            - **Features**: Zero dependencies, static linking, optimized for distribution
            
            For usage instructions, see the README.txt included in each archive.

      - name: Display build summary
        shell: bash
        run: |
          echo "## 🎯 Release Summary for ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: \`${{ matrix.target }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Archive Format**: ${{ matrix.archive_format }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Toolkit Version**: ${{ env.RUST_TOOLKIT_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "py2pyd-${{ matrix.target }}.zip" ]]; then
            size=$(du -h "py2pyd-${{ matrix.target }}.zip" | cut -f1)
            echo "- **Archive Size**: $size" >> $GITHUB_STEP_SUMMARY
          elif [[ -f "py2pyd-${{ matrix.target }}.tar.gz" ]]; then
            size=$(du -h "py2pyd-${{ matrix.target }}.tar.gz" | cut -f1)
            echo "- **Archive Size**: $size" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Zero Dependencies**: No external libraries required" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Static Linking**: Portable across systems" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Optimized**: Built with rust-toolkit ${{ env.RUST_TOOLKIT_VERSION }}" >> $GITHUB_STEP_SUMMARY
