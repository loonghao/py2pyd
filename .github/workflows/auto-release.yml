name: Auto Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - '.github/workflows/**'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: "0"

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version
        id: version
        run: |
          # Get version from Cargo.toml
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version tag already exists
          if git tag -l "v$CURRENT_VERSION" | grep -q "v$CURRENT_VERSION"; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version v$CURRENT_VERSION already exists"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "New version v$CURRENT_VERSION detected"
          fi

  build-and-release:
    name: Build and Release
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: py2pyd.exe
            asset_name: py2pyd-windows-x86_64.zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: py2pyd
            asset_name: py2pyd-linux-x86_64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: py2pyd
            asset_name: py2pyd-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: py2pyd
            asset_name: py2pyd-macos-aarch64.tar.gz

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"

      - name: Create Release Archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release
          copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} release\
          copy README.md release\
          copy LICENSE release\
          Compress-Archive -Path release\* -DestinationPath ${{ matrix.asset_name }}

      - name: Create Release Archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir release
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/
          cp README.md release/
          cp LICENSE release/
          if [[ "${{ matrix.asset_name }}" == *.tar.gz ]]; then
            tar -czf ${{ matrix.asset_name }} -C release .
          else
            zip -r ${{ matrix.asset_name }} release/
          fi

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.asset_name }}
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    needs: [check-version, build-and-release]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.check-version.outputs.version }}
          git push origin ${{ needs.check-version.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.version }}
          name: Release ${{ needs.check-version.outputs.version }}
          files: |
            artifacts/x86_64-pc-windows-msvc/py2pyd-windows-x86_64.zip
            artifacts/x86_64-unknown-linux-gnu/py2pyd-linux-x86_64.tar.gz
            artifacts/x86_64-apple-darwin/py2pyd-macos-x86_64.tar.gz
            artifacts/aarch64-apple-darwin/py2pyd-macos-aarch64.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
