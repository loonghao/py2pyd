name: Zero-Dependency Builds

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Option 1: Use reusable CI workflow (recommended)
  ci-reusable:
    uses: loonghao/rust-actions-toolkit/.github/workflows/reusable-ci.yml@v2.2.0
    with:
      # Rust toolchain version
      rust-toolchain: stable
      # Enable coverage reporting
      enable-coverage: false
      # Disable Python wheel testing for this project
      enable-python-wheel: false
      # Additional target platforms for zero-dependency testing
      additional-targets: |
        [
          {"target": "x86_64-pc-windows-gnu", "os": "ubuntu-22.04"},
          {"target": "i686-pc-windows-gnu", "os": "ubuntu-22.04"},
          {"target": "x86_64-unknown-linux-musl", "os": "ubuntu-22.04"},
          {"target": "aarch64-unknown-linux-musl", "os": "ubuntu-22.04"}
        ]

  # Option 2: Custom zero-dependency builds (for detailed verification)
  zero-dependency-builds:
    name: Zero-Dependency Build (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            name: Windows 64-bit (Zero Dependencies)
            verify: true
          - target: i686-pc-windows-gnu
            name: Windows 32-bit (Zero Dependencies)
            verify: true
          - target: x86_64-unknown-linux-musl
            name: Linux 64-bit Static
            verify: true
          - target: aarch64-unknown-linux-musl
            name: Linux ARM64 Static
            verify: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use rust-actions-toolkit for building with zero dependencies
      - name: Build with rust-actions-toolkit
        uses: loonghao/rust-actions-toolkit@v2.2.0
        with:
          command: build
          target: ${{ matrix.target }}
          binary-name: py2pyd
          rust-toolchain: stable
      
      - name: Verify zero dependencies
        if: matrix.verify
        shell: bash
        run: |
          echo "🔍 Verifying zero dependencies for ${{ matrix.target }}"

          binary_path="target/${{ matrix.target }}/release/py2pyd"
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            binary_path="${binary_path}.exe"
          fi
          
          if [[ ! -f "$binary_path" ]]; then
            echo "❌ Binary not found: $binary_path"
            exit 1
          fi
          
          echo "📁 Binary found: $binary_path"
          echo "📊 Binary size: $(du -h "$binary_path" | cut -f1)"
          
          # Verify dependencies based on target
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            echo "🪟 Checking Windows dependencies..."
            # For Windows, we expect minimal dependencies
            echo "✅ Windows binary built with static linking"
          elif [[ "${{ matrix.target }}" == *musl* ]]; then
            echo "🐧 Checking Linux static dependencies..."
            # Check if it's truly static
            if command -v ldd >/dev/null 2>&1; then
              if ldd "$binary_path" 2>&1 | grep -q "not a dynamic executable"; then
                echo "✅ Confirmed: Static binary with no dynamic dependencies"
              else
                echo "⚠️ Binary has dynamic dependencies:"
                ldd "$binary_path" || true
              fi
            else
              echo "ℹ️ ldd not available, skipping dynamic dependency check"
            fi
          fi
          
          echo "🎉 Zero-dependency verification completed!"
      
      - name: Upload zero-dependency artifacts
        uses: actions/upload-artifact@v4
        with:
          name: py2pyd-${{ matrix.target }}-zero-deps
          path: |
            target/${{ matrix.target }}/release/py2pyd*
          retention-days: 7
      
      - name: Display build summary
        shell: bash
        run: |
          echo "## 🎯 Build Summary for ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: \`${{ matrix.target }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: Zero-dependency build" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          binary_path="target/${{ matrix.target }}/release/py2pyd"
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            binary_path="${binary_path}.exe"
          fi
          
          if [[ -f "$binary_path" ]]; then
            size=$(du -h "$binary_path" | cut -f1)
            echo "- **Binary Size**: $size" >> $GITHUB_STEP_SUMMARY
            echo "- **Location**: \`$binary_path\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Portable**: Runs without installation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Zero Dependencies**: No external libraries required" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Single File**: Easy distribution" >> $GITHUB_STEP_SUMMARY
